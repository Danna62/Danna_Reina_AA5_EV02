Registro
html
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registro</title>
    <Link rel="stylesheet" href="style.css"> 
</head>
<body>
    <h1 class="title">Registro de la app latios </h1> 
    <h2>Nombres de usuario: <input type="text" >  </h2>
    <h3>contraseña: <input type="text"></h3>
    
    <form action="file:///C:/Users/lenovo/Documents/Dise%C3%B1o%20y%20desarrollo%20web%20caso/inicio%20de%20sesion.html " method="get">

        <button class="button5" onclick="alertar (' Autenticacion satisfatoria' );">Enviar</button>
          <script type="text/javascript">
    function alertar(texto) {
       alert(texto);
    }
</script>
    </form>

style.css
body{
    background-color: rgba(255, 0, 128, 0.699);
    border-bottom: 50px;
    background-position: 50px;
    border-color: aqua;
}
.title{
    color: pink;
}

.formulario{
    position: absolute;
    top:50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 400px;
}formulario h1{
    text-align: center;
    padding: 0 0 20px 0;
    border-bottom:1px solid  silver;


}
.formulario form{
    padding: relative;
    box-sizing: border-box;   
}
form.username{
    position: relative;
    border-bottom: 2px solid #adadad;
    margin: 30px;
}
.username input{
    width: 100%;
    padding: 05px;
    height: 40px;
    font-size: 16px;
    border:none ;
    background: none;
    outline: none;


}
.username label{
    position: absolute;
    top: 50%;
    left: 5px;
    color: black;
    transform: translateY(50%);
    font-size: 16px;
    pointer-events: none;
}
.button5{
    background-color: rgba(0, 255, 76, 0.671);
    text-align: center;
    transform: translate(220px);
    width: 120px;

}   

npm
#!/usr/bin/env bash

# This is used by the Node.js installer, which expects the cygwin/mingw
# shell script to already be present in the npm dependency folder.

(set -o igncr) 2>/dev/null && set -o igncr; # cygwin encoding fix

basedir=`dirname "$0"`

case `uname` in
  *CYGWIN*) basedir=`cygpath -w "$basedir"`;;
esac

if [ `uname` = 'Linux' ] && type wslpath &>/dev/null ; then
  IS_WSL="true"
fi

function no_node_dir {
  # if this didn't work, then everything else below will fail
  echo "Could not determine Node.js install directory" >&2
  exit 1
}

NODE_EXE="$basedir/node.exe"
if ! [ -x "$NODE_EXE" ]; then
  NODE_EXE="$basedir/node"
fi
if ! [ -x "$NODE_EXE" ]; then
  NODE_EXE=node
fi

# this path is passed to node.exe, so it needs to match whatever
# kind of paths Node.js thinks it's using, typically win32 paths.
CLI_BASEDIR="$("$NODE_EXE" -p 'require("path").dirname(process.execPath)' 2> /dev/null)"
if [ $? -ne 0 ]; then
  # this fails under WSL 1 so add an additional message. we also suppress stderr above
  # because the actual error raised is not helpful. in WSL 1 node.exe cannot handle
  # output redirection properly. See https://github.com/microsoft/WSL/issues/2370
  if [ "$IS_WSL" == "true" ]; then
    echo "WSL 1 is not supported. Please upgrade to WSL 2 or above." >&2
  fi
  no_node_dir
fi
NPM_PREFIX_JS="$CLI_BASEDIR/node_modules/npm/bin/npm-prefix.js"
NPM_CLI_JS="$CLI_BASEDIR/node_modules/npm/bin/npm-cli.js"
NPM_PREFIX=`"$NODE_EXE" "$NPM_PREFIX_JS"`
if [ $? -ne 0 ]; then
  no_node_dir
fi
NPM_PREFIX_NPM_CLI_JS="$NPM_PREFIX/node_modules/npm/bin/npm-cli.js"

# a path that will fail -f test on any posix bash
NPM_WSL_PATH="/.."

# WSL can run Windows binaries, so we have to give it the win32 path
# however, WSL bash tests against posix paths, so we need to construct that
# to know if npm is installed globally.
if [ "$IS_WSL" == "true" ]; then
  NPM_WSL_PATH=`wslpath "$NPM_PREFIX_NPM_CLI_JS"`
fi
if [ -f "$NPM_PREFIX_NPM_CLI_JS" ] || [ -f "$NPM_WSL_PATH" ]; then
  NPM_CLI_JS="$NPM_PREFIX_NPM_CLI_JS"
fi

"$NODE_EXE" "$NPM_CLI_JS" "$@"


raw

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="awa-expId" content="vscw_aaflight1016_control:103441;" />  >
    <title>Registro</title>
    <Link rel="stylesheet" href="style.css"> 
</head>
<body>
    <h1 class="title">Registro de la app latios </h1> 
    <h2>Nombres de usuario: <input type="text" >  </h2>
    <h3>contraseña: <input type="text"></h3>
    
    <form action="file:///C:/Users/lenovo/Documents/Dise%C3%B1o%20y%20desarrollo%20web%20caso/inicio%20de%20sesion.html " method="get">

        <button class="button5" onclick="alertar (' Autenticacion satisfatoria' );">Enviar</button>
          <script type="text/javascript">
    function alertar(texto) {
       alert(texto);
    }
</script>
    </form>

style.css
body{
    background-color: rgba(255, 0, 128, 0.699);
    border-bottom: 50px;
    background-position: 50px;
    border-color: aqua;
}
.title{
    color: pink;
}

.formulario{
    position: absolute;
    top:50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 400px;
}formulario h1{
    text-align: center;
    padding: 0 0 20px 0;
    border-bottom:1px solid  silver;


}
.formulario form{
    padding: relative;
    box-sizing: border-box;   
}
form.username{
    position: relative;
    border-bottom: 2px solid #adadad;
    margin: 30px;
}
.username input{
    width: 100%;
    padding: 05px;
    height: 40px;
    font-size: 16px;
    border:none ;
    background: none;
    outline: none;


}
.username label{
    position: absolute;
    top: 50%;
    left: 5px;
    color: black;
    transform: translateY(50%);
    font-size: 16px;
    pointer-events: none;
}
.button5{
    background-color: rgba(0, 255, 76, 0.671);
    text-align: center;
    transform: translate(220px);
    width: 120px;

}   

npm
#!/usr/bin/env bash

# This is used by the Node.js installer, which expects the cygwin/mingw
# shell script to already be present in the npm dependency folder.

(set -o igncr) 2>/dev/null && set -o igncr; # cygwin encoding fix

basedir=`dirname "$0"`

case `uname` in
  *CYGWIN*) basedir=`cygpath -w "$basedir"`;;
esac

if [ `uname` = 'Linux' ] && type wslpath &>/dev/null ; then
  IS_WSL="true"
fi

function no_node_dir {
  # if this didn't work, then everything else below will fail
  echo "Could not determine Node.js install directory" >&2
  exit 1
}

NODE_EXE="$basedir/node.exe"
if ! [ -x "$NODE_EXE" ]; then
  NODE_EXE="$basedir/node"
fi
if ! [ -x "$NODE_EXE" ]; then
  NODE_EXE=node
fi

# this path is passed to node.exe, so it needs to match whatever
# kind of paths Node.js thinks it's using, typically win32 paths.
CLI_BASEDIR="$("$NODE_EXE" -p 'require("path").dirname(process.execPath)' 2> /dev/null)"
if [ $? -ne 0 ]; then
  # this fails under WSL 1 so add an additional message. we also suppress stderr above
  # because the actual error raised is not helpful. in WSL 1 node.exe cannot handle
  # output redirection properly. See https://github.com/microsoft/WSL/issues/2370
  if [ "$IS_WSL" == "true" ]; then
    echo "WSL 1 is not supported. Please upgrade to WSL 2 or above." >&2
  fi
  no_node_dir
fi
NPM_PREFIX_JS="$CLI_BASEDIR/node_modules/npm/bin/npm-prefix.js"
NPM_CLI_JS="$CLI_BASEDIR/node_modules/npm/bin/npm-cli.js"
NPM_PREFIX=`"$NODE_EXE" "$NPM_PREFIX_JS"`
if [ $? -ne 0 ]; then
  no_node_dir
fi
NPM_PREFIX_NPM_CLI_JS="$NPM_PREFIX/node_modules/npm/bin/npm-cli.js"

# a path that will fail -f test on any posix bash
NPM_WSL_PATH="/.."

# WSL can run Windows binaries, so we have to give it the win32 path
# however, WSL bash tests against posix paths, so we need to construct that
# to know if npm is installed globally.
if [ "$IS_WSL" == "true" ]; then
  NPM_WSL_PATH=`wslpath "$NPM_PREFIX_NPM_CLI_JS"`
fi
if [ -f "$NPM_PREFIX_NPM_CLI_JS" ] || [ -f "$NPM_WSL_PATH" ]; then
  NPM_CLI_JS="$NPM_PREFIX_NPM_CLI_JS"
fi

"$NODE_EXE" "$NPM_CLI_JS" "$@"

iniciodesesion
html
!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inicio de sesion </title>
    <Link rel="stylesheet" href="styles.css"> 
</head>
<body>
    <h1 class="title">Inicio de sesion </h1> 
    <h2> usuario: <input type="text"> </h2>
    <h2>Contraseña: <input type="text"> </h2>
    <form action=" file:///C:/Users/lenovo/Documents/interfaces/Bienvenidad.html" method="get">
        <button class="button3" onclick="alertar(' Autenticacion satisfactoria'  )">Ingresar </button>
        <script type="text/javascript">
            function alertar(texto) {
               alert(texto);
            
            }
            
        </script>
    </form>
    <form action="file:///C:/Users/lenovo/Documents/Dise%C3%B1o%20y%20desarrollo%20web%20caso/inicio%20de%20sesion.html? " method="get">
        <script type="text/javascript">
            function alertar(texto) {
               alert(texto); 
               false
               alertar( ' error de autenticacion' )
            }
            
        </script>

               
    </form>

    
</body>
</html>

styles.css
body{
    background-color: #301ce9;
}
.title{
color: black;
}
.button3{
background-color: red;
transform: translate(5px);

}
npm
#!/usr/bin/env bash

# This is used by the Node.js installer, which expects the cygwin/mingw
# shell script to already be present in the npm dependency folder.

(set -o igncr) 2>/dev/null && set -o igncr; # cygwin encoding fix

basedir=`dirname "$0"`

case `uname` in
  *CYGWIN*) basedir=`cygpath -w "$basedir"`;;
esac

if [ `uname` = 'Linux' ] && type wslpath &>/dev/null ; then
  IS_WSL="true"
fi

function no_node_dir {
  # if this didn't work, then everything else below will fail
  echo "Could not determine Node.js install directory" >&2
  exit 1
}

NODE_EXE="$basedir/node.exe"
if ! [ -x "$NODE_EXE" ]; then
  NODE_EXE="$basedir/node"
fi
if ! [ -x "$NODE_EXE" ]; then
  NODE_EXE=node
fi

# this path is passed to node.exe, so it needs to match whatever
# kind of paths Node.js thinks it's using, typically win32 paths.
CLI_BASEDIR="$("$NODE_EXE" -p 'require("path").dirname(process.execPath)' 2> /dev/null)"
if [ $? -ne 0 ]; then
  # this fails under WSL 1 so add an additional message. we also suppress stderr above
  # because the actual error raised is not helpful. in WSL 1 node.exe cannot handle
  # output redirection properly. See https://github.com/microsoft/WSL/issues/2370
  if [ "$IS_WSL" == "true" ]; then
    echo "WSL 1 is not supported. Please upgrade to WSL 2 or above." >&2
  fi
  no_node_dir
fi
NPM_PREFIX_JS="$CLI_BASEDIR/node_modules/npm/bin/npm-prefix.js"
NPM_CLI_JS="$CLI_BASEDIR/node_modules/npm/bin/npm-cli.js"
NPM_PREFIX=`"$NODE_EXE" "$NPM_PREFIX_JS"`
if [ $? -ne 0 ]; then
  no_node_dir
fi
NPM_PREFIX_NPM_CLI_JS="$NPM_PREFIX/node_modules/npm/bin/npm-cli.js"

# a path that will fail -f test on any posix bash
NPM_WSL_PATH="/.."

# WSL can run Windows binaries, so we have to give it the win32 path
# however, WSL bash tests against posix paths, so we need to construct that
# to know if npm is installed globally.
if [ "$IS_WSL" == "true" ]; then
  NPM_WSL_PATH=`wslpath "$NPM_PREFIX_NPM_CLI_JS"`
fi
if [ -f "$NPM_PREFIX_NPM_CLI_JS" ] || [ -f "$NPM_WSL_PATH" ]; then
  NPM_CLI_JS="$NPM_PREFIX_NPM_CLI_JS"
fi

"$NODE_EXE" "$NPM_CLI_JS" "$@"
Raw
html
!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inicio de sesion </title>
    <Link rel="stylesheet" href="styles.css"> 
</head>
<body>
    <h1 class="title">Inicio de sesion </h1> 
    <h2> usuario: <input type="text"> </h2>
    <h2>Contraseña: <input type="text"> </h2>
    <form action=" file:///C:/Users/lenovo/Documents/interfaces/Bienvenidad.html" method="get">
        <button class="button3" onclick="alertar(' Autenticacion satisfactoria'  )">Ingresar </button>
        <script type="text/javascript">
            function alertar(texto) {
               alert(texto);
            
            }
            
        </script>
    </form>
    <form action="file:///C:/Users/lenovo/Documents/Dise%C3%B1o%20y%20desarrollo%20web%20caso/inicio%20de%20sesion.html? " method="get">
        <script type="text/javascript">
            function alertar(texto) {
               alert(texto); 
               false
               alertar( ' error de autenticacion' )
            }
            
        </script>

               
    </form>

    
</body>
</html>

styles.css
body{
    background-color: #301ce9;
}
.title{
color: black;
}
.button3{
background-color: red;
transform: translate(5px);

}
npm
#!/usr/bin/env bash

# This is used by the Node.js installer, which expects the cygwin/mingw
# shell script to already be present in the npm dependency folder.

(set -o igncr) 2>/dev/null && set -o igncr; # cygwin encoding fix

basedir=`dirname "$0"`

case `uname` in
  *CYGWIN*) basedir=`cygpath -w "$basedir"`;;
esac

if [ `uname` = 'Linux' ] && type wslpath &>/dev/null ; then
  IS_WSL="true"
fi

function no_node_dir {
  # if this didn't work, then everything else below will fail
  echo "Could not determine Node.js install directory" >&2
  exit 1
}

NODE_EXE="$basedir/node.exe"
if ! [ -x "$NODE_EXE" ]; then
  NODE_EXE="$basedir/node"
fi
if ! [ -x "$NODE_EXE" ]; then
  NODE_EXE=node
fi

# this path is passed to node.exe, so it needs to match whatever
# kind of paths Node.js thinks it's using, typically win32 paths.
CLI_BASEDIR="$("$NODE_EXE" -p 'require("path").dirname(process.execPath)' 2> /dev/null)"
if [ $? -ne 0 ]; then
  # this fails under WSL 1 so add an additional message. we also suppress stderr above
  # because the actual error raised is not helpful. in WSL 1 node.exe cannot handle
  # output redirection properly. See https://github.com/microsoft/WSL/issues/2370
  if [ "$IS_WSL" == "true" ]; then
    echo "WSL 1 is not supported. Please upgrade to WSL 2 or above." >&2
  fi
  no_node_dir
fi
NPM_PREFIX_JS="$CLI_BASEDIR/node_modules/npm/bin/npm-prefix.js"
NPM_CLI_JS="$CLI_BASEDIR/node_modules/npm/bin/npm-cli.js"
NPM_PREFIX=`"$NODE_EXE" "$NPM_PREFIX_JS"`
if [ $? -ne 0 ]; then
  no_node_dir
fi
NPM_PREFIX_NPM_CLI_JS="$NPM_PREFIX/node_modules/npm/bin/npm-cli.js"

# a path that will fail -f test on any posix bash
NPM_WSL_PATH="/.."

# WSL can run Windows binaries, so we have to give it the win32 path
# however, WSL bash tests against posix paths, so we need to construct that
# to know if npm is installed globally.
if [ "$IS_WSL" == "true" ]; then
  NPM_WSL_PATH=`wslpath "$NPM_PREFIX_NPM_CLI_JS"`
fi
if [ -f "$NPM_PREFIX_NPM_CLI_JS" ] || [ -f "$NPM_WSL_PATH" ]; then
  NPM_CLI_JS="$NPM_PREFIX_NPM_CLI_JS"
fi

"$NODE_EXE" "$NPM_CLI_JS" "$@"










